// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Usamos SafeMath para evitar problemas de desbordamiento
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract FlorenCoin {
    using SafeMath for uint256;  // Aplicamos SafeMath a las variables

    string public name = "FlorenCoin";  // Nombre del token
    string public symbol = "FLOREN";    // Símbolo del token
    uint8 public decimals = 18;         // Decimales del token
    uint256 public totalSupply;         // Total de tokens en circulación

    mapping(address => uint256) public balanceOf;  // Mapeo de saldos de las direcciones
    mapping(address => mapping(address => uint256)) public allowance; // Mapeo de allowances

    address public owner;  // Propietario del contrato
    mapping(address => bool) public isAuthorized;  // Direcciones autorizadas (roles de administración)

    // Definir eventos
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);  // Evento de transferencia de propiedad

    // Constructor que asigna la cantidad inicial de tokens al creador (msg.sender)
    constructor() {
        owner = msg.sender;  // El creador del contrato es el propietario inicial
        totalSupply = 1000000 * 10 ** uint256(decimals); // 1 millón de tokens
        balanceOf[msg.sender] = totalSupply;  // El propietario inicial recibe todos los tokens
        emit Transfer(address(0), msg.sender, totalSupply);  // Emitir el evento de transferencia inicial
    }

    // Modificadores
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }

    modifier onlyAuthorized() {
        require(isAuthorized[msg.sender] || msg.sender == owner, "Not authorized");
        _;
    }

    // Función para transferir tokens
    function transfer(address to, uint256 amount) public returns (bool) {
        require(to != address(0), "Cannot transfer to the zero address");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);  // Usamos SafeMath para la resta
        balanceOf[to] = balanceOf[to].add(amount);  // Usamos SafeMath para la suma
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    // Función para aprobar una cantidad de tokens a un tercero
    function approve(address spender, uint256 amount) public returns (bool) {
        require(spender != address(0), "Cannot approve the zero address");
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Función para transferir tokens desde una dirección aprobada
    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(from != address(0), "Cannot transfer from the zero address");
        require(to != address(0), "Cannot transfer to the zero address");
        require(balanceOf[from] >= amount, "Insufficient balance");
        require(allowance[from][msg.sender] >= amount, "Allowance exceeded");

        balanceOf[from] = balanceOf[from].sub(amount);  // Usamos SafeMath para la resta
        balanceOf[to] = balanceOf[to].add(amount);  // Usamos SafeMath para la suma
        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);  // Usamos SafeMath para la resta
        emit Transfer(from, to, amount);
        return true;
    }

    // Función para transferir la propiedad del contrato
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    // Función para agregar direcciones autorizadas
    function authorize(address account) public onlyOwner {
        require(account != address(0), "Cannot authorize the zero address");
        isAuthorized[account] = true;
    }

    // Función para revocar la autorización de una dirección
    function revokeAuthorization(address account) public onlyOwner {
        require(account != address(0), "Cannot revoke the zero address");
        isAuthorized[account] = false;
    }

    // Función para ver el balance del propietario (para simplificación)
    function ownerBalance() public view returns (uint256) {
        return balanceOf[owner];
    }

    // Función para ver el total supply del token
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }
}
